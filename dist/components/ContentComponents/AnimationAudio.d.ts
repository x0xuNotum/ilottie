import React from 'react';
import { Action, AudioAction, VolumeAnimationFunction } from 'schemas/actions';
import { AnimationComponent } from 'schemas/component';
import { EventEmitter, ILottieEvent } from 'stores/contextStores/eventEmitter';
import { RunningActionsStore } from 'stores/contextStores/runningActions';
import { VolumeStore } from 'stores/contextStores/volumeStore';
import { Deferred } from 'utils/promise';
interface IAudioPlayer extends React.MediaHTMLAttributes<HTMLAudioElement> {
    data: AnimationComponent;
    src: string;
    resourcesLoadDeferredObj: Deferred<unknown>;
}
export declare class AnimationSound extends React.Component<IAudioPlayer> {
    audioElement: React.RefObject<HTMLAudioElement>;
    subscriptions: Array<() => void>;
    loopCount: number;
    paused: boolean;
    volumeUpAnimationDuration: number;
    volumeDownAnimationDuration: number;
    volumeUpFunction: VolumeAnimationFunction;
    volumeDownFunction: VolumeAnimationFunction;
    defaultVolume: number;
    minVolume: number;
    maxVolume: number;
    static contextType: React.Context<import("../../stores/contextStores").ContextStore>;
    cancel: Function | null;
    get eventEmitter(): EventEmitter;
    get runningActionsStore(): RunningActionsStore;
    get volumeStore(): VolumeStore;
    render(): JSX.Element;
    onCanPlayThrough(): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    unsubscribeFromAllEvents(): void;
    subscribeForEvent<T extends Action>(type: string, cb: (args: T) => void | Promise<void>): void;
    emitComplete(): void;
    handlePlayAction(action: AudioAction): Promise<void>;
    resetAnimationsCount(): void;
    setAudioSpeed(action: AudioAction): void;
    setVolumeTimingFunction(action: AudioAction, shouldIncreseVolume: boolean): void;
    completeRunningActions(): Promise<void>;
    completeCallback(actionCount: number, accept: Function, event: ILottieEvent): void;
    completeInterruptedAction(accept: Function, event: ILottieEvent): void;
    playAnimationOrComplete(actionCount: number, accept: Function): void;
    playAudio(): Promise<void>;
    graduallyChangeVolumeWithStep(volumeAnimationFunction: VolumeAnimationFunction, shouldIncreseVolume: boolean): Promise<void>;
    changeVolumeLinearly(audio: HTMLAudioElement, shouldIncreseVolume: boolean): Promise<void>;
    changeVolumeLogarithmicly(audio: HTMLAudioElement, shouldIncreseVolume: boolean): Promise<void>;
    changeVolumeInstantlyIfNecessary(audio: HTMLAudioElement, shouldIncreseVolume: boolean): boolean;
    pause(): Promise<void>;
    handlePauseAction(action: AudioAction): Promise<void>;
    setLoopCount(value: number): void;
    incrementAnimationCount(): void;
    stopPlayback(): void;
}
export {};
