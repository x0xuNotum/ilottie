import { AnimationItem } from 'lottie-web';
import { IReactionDisposer } from 'mobx';
import React from 'react';
import { Action, LottieAction } from 'schemas/actions';
import { AnimationComponent } from 'schemas/component';
import { CursorPositionRectangle, NumbersTuple } from 'schemas/helpers';
import { ComponentsPositioner } from 'stores/contextStores/componentsPositioner';
import { EventEmitter, ILottieEvent } from 'stores/contextStores/eventEmitter';
import { ExternalValueStore } from 'stores/contextStores/externalValueStore';
import { ResourcesStore } from 'stores/contextStores/resourcesStore';
import { RunningActionsStore } from 'stores/contextStores/runningActions';
import { SettingsStore } from 'stores/contextStores/settingsStore';
import { Deferred } from 'utils/promise';
interface NewComponentProps {
    data: AnimationComponent;
    src: string;
    resourcesLoadDeferredObj: Deferred<unknown>;
}
declare class LottieComponent extends React.Component<NewComponentProps> {
    lottieContainer: React.RefObject<HTMLDivElement>;
    animation: AnimationItem | null;
    animationCount: number;
    animationPaused: boolean;
    animationLastFrame: number;
    subscriptions: Array<() => void>;
    disposer: IReactionDisposer | null;
    static contextType: React.Context<import("../../stores/contextStores").ContextStore>;
    get eventEmitter(): EventEmitter;
    get externalValueStore(): ExternalValueStore;
    get componentsPositioner(): ComponentsPositioner;
    get resourcesStore(): ResourcesStore;
    get runningActionsStore(): RunningActionsStore;
    get settingsStore(): SettingsStore;
    render(): JSX.Element;
    componentDidMount(): Promise<void>;
    loadLottieAnimation(): void;
    addEventListeners(): void;
    resolveImagesPromise(): void;
    subscribeForEvents(): void;
    subscribeForEvent<T extends Action>(type: string, cb: (args: T) => void | Promise<void>): void;
    componentWillUnmount(): void;
    unsubscribeFromAllEvents(): void;
    componentDidUpdate(): void;
    setAnimationLastFrame(): void;
    emitComplete(event: ILottieEvent): () => void;
    handlePlayAction(action: LottieAction): Promise<void>;
    setPlaybackSpeed(action: LottieAction): void;
    completeRunningActions(action: LottieAction): Promise<void>;
    completeCallback(actionCount: number, accept: Function, event: ILottieEvent): void;
    playAnimation(event: ILottieEvent): Promise<void>;
    incrementAnimationCount(): void;
    resetAnimationsCount(): void;
    setAnimationCount(value: number): void;
    setAnimationPaused(value: boolean): void;
    completeInterruptedAction(accept: Function, event: ILottieEvent): void;
    playAnimationOrComplete(actionCount: number, accept: Function, event: ILottieEvent): void;
    handlePauseAction(action: LottieAction): Promise<void>;
    handleSeekAction(event: ILottieEvent): void;
    handleSeekBasedOnCursorPosition(event: ILottieEvent, segmentsToPlay: NumbersTuple[]): void;
    getAnimationProgressFromCursorPosition(eventPosition: CursorPositionRectangle): number | null;
    handleSeekBasedOnExternalValue(event: ILottieEvent, segmentsToPlay: NumbersTuple[]): void;
}
export default LottieComponent;
